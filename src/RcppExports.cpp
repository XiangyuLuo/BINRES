// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// FindNeighbors_Rcpp
arma::uvec FindNeighbors_Rcpp(int i, arma::vec& X_loc, arma::vec& Y_loc, std::string platform);
RcppExport SEXP _BINRES_FindNeighbors_Rcpp(SEXP iSEXP, SEXP X_locSEXP, SEXP Y_locSEXP, SEXP platformSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type X_loc(X_locSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Y_loc(Y_locSEXP);
    Rcpp::traits::input_parameter< std::string >::type platform(platformSEXP);
    rcpp_result_gen = Rcpp::wrap(FindNeighbors_Rcpp(i, X_loc, Y_loc, platform));
    return rcpp_result_gen;
END_RCPP
}
// ComputePottsDist_Rcpp
double ComputePottsDist_Rcpp(double tmpBeta, arma::vec c_vec, arma::vec& X_loc, arma::vec& Y_loc, std::string platform);
RcppExport SEXP _BINRES_ComputePottsDist_Rcpp(SEXP tmpBetaSEXP, SEXP c_vecSEXP, SEXP X_locSEXP, SEXP Y_locSEXP, SEXP platformSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type tmpBeta(tmpBetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type X_loc(X_locSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Y_loc(Y_locSEXP);
    Rcpp::traits::input_parameter< std::string >::type platform(platformSEXP);
    rcpp_result_gen = Rcpp::wrap(ComputePottsDist_Rcpp(tmpBeta, c_vec, X_loc, Y_loc, platform));
    return rcpp_result_gen;
END_RCPP
}
// UpdateClIds
List UpdateClIds(double dpAlpha, double pottsBeta, double psi1, double psi2, double geoq, arma::vec Pi, arma::vec dpXi, arma::uvec clIds, arma::uvec& L1_Ids, arma::uvec& L2_Ids, arma::vec& X_loc, arma::vec& Y_loc, std::string platform);
RcppExport SEXP _BINRES_UpdateClIds(SEXP dpAlphaSEXP, SEXP pottsBetaSEXP, SEXP psi1SEXP, SEXP psi2SEXP, SEXP geoqSEXP, SEXP PiSEXP, SEXP dpXiSEXP, SEXP clIdsSEXP, SEXP L1_IdsSEXP, SEXP L2_IdsSEXP, SEXP X_locSEXP, SEXP Y_locSEXP, SEXP platformSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dpAlpha(dpAlphaSEXP);
    Rcpp::traits::input_parameter< double >::type pottsBeta(pottsBetaSEXP);
    Rcpp::traits::input_parameter< double >::type psi1(psi1SEXP);
    Rcpp::traits::input_parameter< double >::type psi2(psi2SEXP);
    Rcpp::traits::input_parameter< double >::type geoq(geoqSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type dpXi(dpXiSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type clIds(clIdsSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type L1_Ids(L1_IdsSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type L2_Ids(L2_IdsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type X_loc(X_locSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Y_loc(Y_locSEXP);
    Rcpp::traits::input_parameter< std::string >::type platform(platformSEXP);
    rcpp_result_gen = Rcpp::wrap(UpdateClIds(dpAlpha, pottsBeta, psi1, psi2, geoq, Pi, dpXi, clIds, L1_Ids, L2_Ids, X_loc, Y_loc, platform));
    return rcpp_result_gen;
END_RCPP
}
// UpdateL1
Rcpp::List UpdateL1(int K1_max, arma::mat testData1, Rcpp::List mu_k, Rcpp::List Lambda_k, arma::vec a_mu, arma::mat B_mu, int d1, arma::mat R1, double psi1, double geoq, arma::uvec& clIds, arma::uvec L1_Ids);
RcppExport SEXP _BINRES_UpdateL1(SEXP K1_maxSEXP, SEXP testData1SEXP, SEXP mu_kSEXP, SEXP Lambda_kSEXP, SEXP a_muSEXP, SEXP B_muSEXP, SEXP d1SEXP, SEXP R1SEXP, SEXP psi1SEXP, SEXP geoqSEXP, SEXP clIdsSEXP, SEXP L1_IdsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K1_max(K1_maxSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type testData1(testData1SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mu_k(mu_kSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Lambda_k(Lambda_kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a_mu(a_muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B_mu(B_muSEXP);
    Rcpp::traits::input_parameter< int >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R1(R1SEXP);
    Rcpp::traits::input_parameter< double >::type psi1(psi1SEXP);
    Rcpp::traits::input_parameter< double >::type geoq(geoqSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type clIds(clIdsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type L1_Ids(L1_IdsSEXP);
    rcpp_result_gen = Rcpp::wrap(UpdateL1(K1_max, testData1, mu_k, Lambda_k, a_mu, B_mu, d1, R1, psi1, geoq, clIds, L1_Ids));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BINRES_FindNeighbors_Rcpp", (DL_FUNC) &_BINRES_FindNeighbors_Rcpp, 4},
    {"_BINRES_ComputePottsDist_Rcpp", (DL_FUNC) &_BINRES_ComputePottsDist_Rcpp, 5},
    {"_BINRES_UpdateClIds", (DL_FUNC) &_BINRES_UpdateClIds, 13},
    {"_BINRES_UpdateL1", (DL_FUNC) &_BINRES_UpdateL1, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_BINRES(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
